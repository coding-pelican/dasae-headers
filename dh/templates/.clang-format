## clang-format configurator v2 https://clang-format-configurator.site/
## see https://clang.llvm.org/docs/ClangFormatStyleOptions.html
---
BasedOnStyle: LLVM
AccessModifierOffset: -4
AlignAfterOpenBracket: BlockIndent
AlignConsecutiveAssignments:
  Enabled: true
  AcrossComments: true
AlignConsecutiveBitFields:
  Enabled: true
  AcrossComments: true
AlignConsecutiveDeclarations:
  Enabled: true
  AcrossComments: true
AlignConsecutiveMacros:
  Enabled: true
  AcrossComments: true
AlignConsecutiveShortCaseStatements:
  Enabled: true
  AcrossComments: true
AlignEscapedNewlines: Left
AlignOperands: AlignAfterOperator
AllowShortBlocksOnASingleLine: Always
AllowShortIfStatementsOnASingleLine: Always
AllowShortLoopsOnASingleLine: true
BinPackArguments: false
BinPackParameters: false
BraceWrapping:
  AfterCaseLabel: false
  AfterClass: false
  AfterControlStatement: Never
  AfterEnum: false
  AfterFunction: false
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: true
  SplitEmptyNamespace: true
BreakBeforeBinaryOperators: All
BreakBeforeBraces: Custom
BreakConstructorInitializers: BeforeComma
ColumnLimit: 0
Cpp11BracedListStyle: false
IndentWidth: 4
InsertBraces: true
InsertNewlineAtEOF: true
MaxEmptyLinesToKeep: 5
ObjCBlockIndentWidth: 4
PointerAlignment: Left
SortIncludes: Never
Standard: c++20
TabWidth: 4
ConstructorInitializerAllOnOneLineOrOnePerLine: false

TypeNames:
  # Inference
  - let
  - var
  - let_
  - var_
  - TypeOf
  - TypeUnqualOf
  # primitive
  - u8
  - u16
  - u32
  - u64
  - usize
  - i8
  - i16
  - i32
  - i64
  - isize
  - f32
  - f64
  - bool
  - char
  - rawptr_const$
  - rawptr$
  - anyptr_const
  - anyptr
  - AnyType
  - Void
  # Pointer
  - Ptr_const$
  - Ptr$
  - Ptr_const$$
  - Ptr$$
  # Slice
  - SliZ_const$
  - SliZ$
  - SliZ_const$$
  - SliZ$$
  - SliS_const$
  - SliS$
  - SliS_const$$
  - SliS$$
  - Sli_const$
  - Sli$
  - Sli_const$$
  - Sli$$
  # Array
  - Arr$
  - Arr$$
  # Optional value
  - Opt$
  - Opt$$
  # Error result
  - Err$
  - Err$$
  - Err$Void
  - Err$void
  # Atomic
  - atomic_Value$
  - atomic_Value$$
Macros:
  # Optional value
  - "if_some(_,_)=if (_)"
  - "if_none(_)=if (_)"
  - "else_none=else"
  - "else_some(_)=else if (_)"
  # Error result
  - "if_err(_,_)=if (_)"
  - "if_ok(_,_)=if (_)"
  - "if_void(_)=if (_)"
  - "else_ok(_)=else if (_)"
  - "else_void=else"
  - "else_err(_)=else if (_)"
  # Union enum
  - tagUnion(tag,expr)=
  - tagUnion$(T,tag,expr)=
  - toTagUnion(addr,tag,expr)=
  # Match
  - "match_(expr)=switch (expr)"
  - "pattern_(tag,capture)=case tag:"
  - "fallback_(_)=default:"
  - "$must_check=/**/"
  # Eval
  - "eval_(_)=({ _; })"
  - "eval$(T,_)=(T)({ _; })"
  - "eval_return_(_)=return _"
  - "asg_eval(_)=({ _; })"
  # Scope
  - block_defer=/**/
  - block_deferral=/**/
  - defer_break=break
  - "fn_(name_with_params,return_type)=return_type name_with_params"
  - "fn_scope(name_with_params,return_type)=return_type name_with_params"
  - $unscoped=/**/
  - "fn_scope_ext(name_with_params,return_type)=return_type name_with_params"
  - $unguarded=/**/
  - "fn_TEST_scope(name)=Err$void TEST_caseFn(void)"
  - TEST_unscoped=/**/
  - "fn_TEST_scope_ext(name)=Err$void TEST_caseFn_ext(void)"
  - TEST_unscoped_ext=/**/
ForEachMacros:
  - pp_foreach
  - for_slice
  - for_slice_indexed
  - for_slice_rev
  - for_slice_rev_indexed
  - for_array
  - for_array_indexed
  - for_array_rev
  - for_array_rev_indexed
AttributeMacros:
  - $on_load
  - $on_exit
  - $inline
  - $inline_always
  - $inline_never
  - $deprecated
  - $deprecated_msg
  - $deprecated_instead
  - $must_check
  - $no_return
  - $nullable
  - $nonnull
StatementAttributeLikeMacros:
  - $ignore
  - eval
  - eval_return
  - type$
  - make$
  - create$
  - initial
  - cleared
  - unwrap
  - orelse
  - try_
  - catch_
  - catch_from
WhitespaceSensitiveMacros:
  - with_
  - try_
  - catch_
  - catch_from
  - return_err
  - return_ok
  - unwrap
  - orelse
  - return_some
  - return_none
  - config_ErrSet
  - config_UnionEnum
  - config_UnionEnumAsField
  - meta_refPtr
  - meta_refSli
  - meta_refPtr_const
  - meta_refSli_const
  - meta_castPtr$
  - meta_castSli$
  - meta_cast$
  - meta_ptrToAny
  - meta_sliToAny
